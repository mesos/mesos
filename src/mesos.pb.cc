// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mesos.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mesos {

namespace {

const ::google::protobuf::Descriptor* FrameworkID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameworkID_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferID_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlaveID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlaveID_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskID_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutorID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutorID_reflection_ = NULL;
const ::google::protobuf::Descriptor* Param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Param_reflection_ = NULL;
const ::google::protobuf::Descriptor* Params_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Params_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_Scalar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_Scalar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_Range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_Range_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_Ranges_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_Ranges_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_Set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_Set_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Resource_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExecutorArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutorArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameworkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameworkInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlaveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlaveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Offer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Offer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Filters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Filters_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mesos_2eproto() {
  protobuf_AddDesc_mesos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mesos.proto");
  GOOGLE_CHECK(file != NULL);
  FrameworkID_descriptor_ = file->message_type(0);
  static const int FrameworkID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkID, value_),
  };
  FrameworkID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameworkID_descriptor_,
      FrameworkID::default_instance_,
      FrameworkID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameworkID));
  OfferID_descriptor_ = file->message_type(1);
  static const int OfferID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferID, value_),
  };
  OfferID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferID_descriptor_,
      OfferID::default_instance_,
      OfferID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferID));
  SlaveID_descriptor_ = file->message_type(2);
  static const int SlaveID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveID, value_),
  };
  SlaveID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlaveID_descriptor_,
      SlaveID::default_instance_,
      SlaveID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlaveID));
  TaskID_descriptor_ = file->message_type(3);
  static const int TaskID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskID, value_),
  };
  TaskID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskID_descriptor_,
      TaskID::default_instance_,
      TaskID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskID));
  ExecutorID_descriptor_ = file->message_type(4);
  static const int ExecutorID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorID, value_),
  };
  ExecutorID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutorID_descriptor_,
      ExecutorID::default_instance_,
      ExecutorID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutorID));
  Param_descriptor_ = file->message_type(5);
  static const int Param_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, value_),
  };
  Param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Param_descriptor_,
      Param::default_instance_,
      Param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Param));
  Params_descriptor_ = file->message_type(6);
  static const int Params_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Params, param_),
  };
  Params_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Params_descriptor_,
      Params::default_instance_,
      Params_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Params, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Params, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Params));
  Resource_descriptor_ = file->message_type(7);
  static const int Resource_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, scalar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, set_),
  };
  Resource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_descriptor_,
      Resource::default_instance_,
      Resource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource));
  Resource_Scalar_descriptor_ = Resource_descriptor_->nested_type(0);
  static const int Resource_Scalar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_Scalar, value_),
  };
  Resource_Scalar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_Scalar_descriptor_,
      Resource_Scalar::default_instance_,
      Resource_Scalar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_Scalar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_Scalar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource_Scalar));
  Resource_Range_descriptor_ = Resource_descriptor_->nested_type(1);
  static const int Resource_Range_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_Range, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_Range, end_),
  };
  Resource_Range_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_Range_descriptor_,
      Resource_Range::default_instance_,
      Resource_Range_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_Range, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_Range, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource_Range));
  Resource_Ranges_descriptor_ = Resource_descriptor_->nested_type(2);
  static const int Resource_Ranges_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_Ranges, range_),
  };
  Resource_Ranges_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_Ranges_descriptor_,
      Resource_Ranges::default_instance_,
      Resource_Ranges_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_Ranges, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_Ranges, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource_Ranges));
  Resource_Set_descriptor_ = Resource_descriptor_->nested_type(3);
  static const int Resource_Set_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_Set, item_),
  };
  Resource_Set_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_Set_descriptor_,
      Resource_Set::default_instance_,
      Resource_Set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_Set, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_Set, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource_Set));
  Resource_Type_descriptor_ = Resource_descriptor_->enum_type(0);
  ExecutorArgs_descriptor_ = file->message_type(8);
  static const int ExecutorArgs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorArgs, framework_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorArgs, executor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorArgs, slave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorArgs, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorArgs, data_),
  };
  ExecutorArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutorArgs_descriptor_,
      ExecutorArgs::default_instance_,
      ExecutorArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutorArgs));
  TaskDescription_descriptor_ = file->message_type(9);
  static const int TaskDescription_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescription, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescription, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescription, slave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescription, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescription, executor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescription, data_),
  };
  TaskDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskDescription_descriptor_,
      TaskDescription::default_instance_,
      TaskDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskDescription));
  TaskStatus_descriptor_ = file->message_type(10);
  static const int TaskStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, data_),
  };
  TaskStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskStatus_descriptor_,
      TaskStatus::default_instance_,
      TaskStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskStatus));
  ExecutorInfo_descriptor_ = file->message_type(11);
  static const int ExecutorInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, executor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, data_),
  };
  ExecutorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutorInfo_descriptor_,
      ExecutorInfo::default_instance_,
      ExecutorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutorInfo));
  FrameworkInfo_descriptor_ = file->message_type(12);
  static const int FrameworkInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, executor_),
  };
  FrameworkInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameworkInfo_descriptor_,
      FrameworkInfo::default_instance_,
      FrameworkInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameworkInfo));
  SlaveInfo_descriptor_ = file->message_type(13);
  static const int SlaveInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, public_hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, resources_),
  };
  SlaveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlaveInfo_descriptor_,
      SlaveInfo::default_instance_,
      SlaveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlaveInfo));
  ResourceRequest_descriptor_ = file->message_type(14);
  static const int ResourceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceRequest, slave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceRequest, resources_),
  };
  ResourceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceRequest_descriptor_,
      ResourceRequest::default_instance_,
      ResourceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceRequest));
  Offer_descriptor_ = file->message_type(15);
  static const int Offer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, framework_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, slave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, executor_ids_),
  };
  Offer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Offer_descriptor_,
      Offer::default_instance_,
      Offer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Offer));
  Filters_descriptor_ = file->message_type(16);
  static const int Filters_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, refuse_seconds_),
  };
  Filters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Filters_descriptor_,
      Filters::default_instance_,
      Filters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Filters));
  TaskState_descriptor_ = file->enum_type(0);
  Status_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mesos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameworkID_descriptor_, &FrameworkID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferID_descriptor_, &OfferID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlaveID_descriptor_, &SlaveID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskID_descriptor_, &TaskID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutorID_descriptor_, &ExecutorID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Param_descriptor_, &Param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Params_descriptor_, &Params::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_descriptor_, &Resource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_Scalar_descriptor_, &Resource_Scalar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_Range_descriptor_, &Resource_Range::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_Ranges_descriptor_, &Resource_Ranges::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_Set_descriptor_, &Resource_Set::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutorArgs_descriptor_, &ExecutorArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskDescription_descriptor_, &TaskDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskStatus_descriptor_, &TaskStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutorInfo_descriptor_, &ExecutorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameworkInfo_descriptor_, &FrameworkInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlaveInfo_descriptor_, &SlaveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceRequest_descriptor_, &ResourceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Offer_descriptor_, &Offer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Filters_descriptor_, &Filters::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mesos_2eproto() {
  delete FrameworkID::default_instance_;
  delete FrameworkID_reflection_;
  delete OfferID::default_instance_;
  delete OfferID_reflection_;
  delete SlaveID::default_instance_;
  delete SlaveID_reflection_;
  delete TaskID::default_instance_;
  delete TaskID_reflection_;
  delete ExecutorID::default_instance_;
  delete ExecutorID_reflection_;
  delete Param::default_instance_;
  delete Param_reflection_;
  delete Params::default_instance_;
  delete Params_reflection_;
  delete Resource::default_instance_;
  delete Resource_reflection_;
  delete Resource_Scalar::default_instance_;
  delete Resource_Scalar_reflection_;
  delete Resource_Range::default_instance_;
  delete Resource_Range_reflection_;
  delete Resource_Ranges::default_instance_;
  delete Resource_Ranges_reflection_;
  delete Resource_Set::default_instance_;
  delete Resource_Set_reflection_;
  delete ExecutorArgs::default_instance_;
  delete ExecutorArgs_reflection_;
  delete TaskDescription::default_instance_;
  delete TaskDescription_reflection_;
  delete TaskStatus::default_instance_;
  delete TaskStatus_reflection_;
  delete ExecutorInfo::default_instance_;
  delete ExecutorInfo_reflection_;
  delete FrameworkInfo::default_instance_;
  delete FrameworkInfo_reflection_;
  delete SlaveInfo::default_instance_;
  delete SlaveInfo_reflection_;
  delete ResourceRequest::default_instance_;
  delete ResourceRequest_reflection_;
  delete Offer::default_instance_;
  delete Offer_reflection_;
  delete Filters::default_instance_;
  delete Filters_reflection_;
}

void protobuf_AddDesc_mesos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013mesos.proto\022\005mesos\"\034\n\013FrameworkID\022\r\n\005v"
    "alue\030\001 \002(\t\"\030\n\007OfferID\022\r\n\005value\030\001 \002(\t\"\030\n\007"
    "SlaveID\022\r\n\005value\030\001 \002(\t\"\027\n\006TaskID\022\r\n\005valu"
    "e\030\001 \002(\t\"\033\n\nExecutorID\022\r\n\005value\030\001 \002(\t\"#\n\005"
    "Param\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"%\n\006Par"
    "ams\022\033\n\005param\030\001 \003(\0132\014.mesos.Param\"\332\002\n\010Res"
    "ource\022\014\n\004name\030\001 \002(\t\022\"\n\004type\030\002 \002(\0162\024.meso"
    "s.Resource.Type\022&\n\006scalar\030\003 \001(\0132\026.mesos."
    "Resource.Scalar\022&\n\006ranges\030\004 \001(\0132\026.mesos."
    "Resource.Ranges\022 \n\003set\030\005 \001(\0132\023.mesos.Res"
    "ource.Set\032\027\n\006Scalar\022\r\n\005value\030\001 \002(\001\032#\n\005Ra"
    "nge\022\r\n\005begin\030\001 \002(\004\022\013\n\003end\030\002 \002(\004\032.\n\006Range"
    "s\022$\n\005range\030\001 \003(\0132\025.mesos.Resource.Range\032"
    "\023\n\003Set\022\014\n\004item\030\001 \003(\t\"\'\n\004Type\022\n\n\006SCALAR\020\000"
    "\022\n\n\006RANGES\020\001\022\007\n\003SET\020\002\"\242\001\n\014ExecutorArgs\022("
    "\n\014framework_id\030\001 \002(\0132\022.mesos.FrameworkID"
    "\022&\n\013executor_id\030\002 \002(\0132\021.mesos.ExecutorID"
    "\022 \n\010slave_id\030\003 \002(\0132\016.mesos.SlaveID\022\020\n\010ho"
    "stname\030\004 \002(\t\022\014\n\004data\030\005 \001(\014\"\272\001\n\017TaskDescr"
    "iption\022\014\n\004name\030\001 \002(\t\022\036\n\007task_id\030\002 \002(\0132\r."
    "mesos.TaskID\022 \n\010slave_id\030\003 \002(\0132\016.mesos.S"
    "laveID\022\"\n\tresources\030\004 \003(\0132\017.mesos.Resour"
    "ce\022%\n\010executor\030\005 \001(\0132\023.mesos.ExecutorInf"
    "o\022\014\n\004data\030\006 \001(\014\"l\n\nTaskStatus\022\036\n\007task_id"
    "\030\001 \002(\0132\r.mesos.TaskID\022\037\n\005state\030\002 \002(\0162\020.m"
    "esos.TaskState\022\017\n\007message\030\004 \001(\t\022\014\n\004data\030"
    "\003 \001(\014\"\224\001\n\014ExecutorInfo\022&\n\013executor_id\030\001 "
    "\002(\0132\021.mesos.ExecutorID\022\013\n\003uri\030\002 \002(\t\022\"\n\tr"
    "esources\030\005 \003(\0132\017.mesos.Resource\022\035\n\006param"
    "s\030\003 \001(\0132\r.mesos.Params\022\014\n\004data\030\004 \001(\014\"R\n\r"
    "FrameworkInfo\022\014\n\004user\030\001 \002(\t\022\014\n\004name\030\002 \002("
    "\t\022%\n\010executor\030\003 \002(\0132\023.mesos.ExecutorInfo"
    "\"Z\n\tSlaveInfo\022\020\n\010hostname\030\001 \002(\t\022\027\n\017publi"
    "c_hostname\030\002 \002(\t\022\"\n\tresources\030\003 \003(\0132\017.me"
    "sos.Resource\"W\n\017ResourceRequest\022 \n\010slave"
    "_id\030\001 \001(\0132\016.mesos.SlaveID\022\"\n\tresources\030\002"
    " \003(\0132\017.mesos.Resource\"\316\001\n\005Offer\022\032\n\002id\030\001 "
    "\002(\0132\016.mesos.OfferID\022(\n\014framework_id\030\002 \002("
    "\0132\022.mesos.FrameworkID\022 \n\010slave_id\030\003 \002(\0132"
    "\016.mesos.SlaveID\022\020\n\010hostname\030\004 \002(\t\022\"\n\tres"
    "ources\030\005 \003(\0132\017.mesos.Resource\022\'\n\014executo"
    "r_ids\030\006 \003(\0132\021.mesos.ExecutorID\"!\n\007Filter"
    "s\022\026\n\016refuse_seconds\030\001 \001(\001*t\n\tTaskState\022\021"
    "\n\rTASK_STARTING\020\000\022\020\n\014TASK_RUNNING\020\001\022\021\n\rT"
    "ASK_FINISHED\020\002\022\017\n\013TASK_FAILED\020\003\022\017\n\013TASK_"
    "KILLED\020\004\022\r\n\tTASK_LOST\020\005*l\n\006Status\022\006\n\002OK\020"
    "\000\022\026\n\022DRIVER_NOT_RUNNING\020\001\022\032\n\026DRIVER_ALRE"
    "ADY_RUNNING\020\002\022\022\n\016DRIVER_ABORTED\020\003\022\022\n\016DRI"
    "VER_STOPPED\020\004B\032\n\020org.apache.mesosB\006Proto"
    "s", 1961);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mesos.proto", &protobuf_RegisterTypes);
  FrameworkID::default_instance_ = new FrameworkID();
  OfferID::default_instance_ = new OfferID();
  SlaveID::default_instance_ = new SlaveID();
  TaskID::default_instance_ = new TaskID();
  ExecutorID::default_instance_ = new ExecutorID();
  Param::default_instance_ = new Param();
  Params::default_instance_ = new Params();
  Resource::default_instance_ = new Resource();
  Resource_Scalar::default_instance_ = new Resource_Scalar();
  Resource_Range::default_instance_ = new Resource_Range();
  Resource_Ranges::default_instance_ = new Resource_Ranges();
  Resource_Set::default_instance_ = new Resource_Set();
  ExecutorArgs::default_instance_ = new ExecutorArgs();
  TaskDescription::default_instance_ = new TaskDescription();
  TaskStatus::default_instance_ = new TaskStatus();
  ExecutorInfo::default_instance_ = new ExecutorInfo();
  FrameworkInfo::default_instance_ = new FrameworkInfo();
  SlaveInfo::default_instance_ = new SlaveInfo();
  ResourceRequest::default_instance_ = new ResourceRequest();
  Offer::default_instance_ = new Offer();
  Filters::default_instance_ = new Filters();
  FrameworkID::default_instance_->InitAsDefaultInstance();
  OfferID::default_instance_->InitAsDefaultInstance();
  SlaveID::default_instance_->InitAsDefaultInstance();
  TaskID::default_instance_->InitAsDefaultInstance();
  ExecutorID::default_instance_->InitAsDefaultInstance();
  Param::default_instance_->InitAsDefaultInstance();
  Params::default_instance_->InitAsDefaultInstance();
  Resource::default_instance_->InitAsDefaultInstance();
  Resource_Scalar::default_instance_->InitAsDefaultInstance();
  Resource_Range::default_instance_->InitAsDefaultInstance();
  Resource_Ranges::default_instance_->InitAsDefaultInstance();
  Resource_Set::default_instance_->InitAsDefaultInstance();
  ExecutorArgs::default_instance_->InitAsDefaultInstance();
  TaskDescription::default_instance_->InitAsDefaultInstance();
  TaskStatus::default_instance_->InitAsDefaultInstance();
  ExecutorInfo::default_instance_->InitAsDefaultInstance();
  FrameworkInfo::default_instance_->InitAsDefaultInstance();
  SlaveInfo::default_instance_->InitAsDefaultInstance();
  ResourceRequest::default_instance_->InitAsDefaultInstance();
  Offer::default_instance_->InitAsDefaultInstance();
  Filters::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mesos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mesos_2eproto {
  StaticDescriptorInitializer_mesos_2eproto() {
    protobuf_AddDesc_mesos_2eproto();
  }
} static_descriptor_initializer_mesos_2eproto_;

const ::google::protobuf::EnumDescriptor* TaskState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskState_descriptor_;
}
bool TaskState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string FrameworkID::_default_value_;
#ifndef _MSC_VER
const int FrameworkID::kValueFieldNumber;
#endif  // !_MSC_VER

FrameworkID::FrameworkID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameworkID::InitAsDefaultInstance() {
}

FrameworkID::FrameworkID(const FrameworkID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameworkID::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameworkID::~FrameworkID() {
  SharedDtor();
}

void FrameworkID::SharedDtor() {
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void FrameworkID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameworkID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameworkID_descriptor_;
}

const FrameworkID& FrameworkID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

FrameworkID* FrameworkID::default_instance_ = NULL;

FrameworkID* FrameworkID::New() const {
  return new FrameworkID;
}

void FrameworkID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameworkID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameworkID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameworkID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameworkID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameworkID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameworkID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameworkID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameworkID::MergeFrom(const FrameworkID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameworkID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkID::CopyFrom(const FrameworkID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FrameworkID::Swap(FrameworkID* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameworkID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameworkID_descriptor_;
  metadata.reflection = FrameworkID_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string OfferID::_default_value_;
#ifndef _MSC_VER
const int OfferID::kValueFieldNumber;
#endif  // !_MSC_VER

OfferID::OfferID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfferID::InitAsDefaultInstance() {
}

OfferID::OfferID(const OfferID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfferID::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferID::~OfferID() {
  SharedDtor();
}

void OfferID::SharedDtor() {
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void OfferID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferID_descriptor_;
}

const OfferID& OfferID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

OfferID* OfferID::default_instance_ = NULL;

OfferID* OfferID::New() const {
  return new OfferID;
}

void OfferID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfferID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfferID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfferID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferID::MergeFrom(const OfferID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferID::CopyFrom(const OfferID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OfferID::Swap(OfferID* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferID_descriptor_;
  metadata.reflection = OfferID_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SlaveID::_default_value_;
#ifndef _MSC_VER
const int SlaveID::kValueFieldNumber;
#endif  // !_MSC_VER

SlaveID::SlaveID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlaveID::InitAsDefaultInstance() {
}

SlaveID::SlaveID(const SlaveID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlaveID::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlaveID::~SlaveID() {
  SharedDtor();
}

void SlaveID::SharedDtor() {
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SlaveID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlaveID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlaveID_descriptor_;
}

const SlaveID& SlaveID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

SlaveID* SlaveID::default_instance_ = NULL;

SlaveID* SlaveID::New() const {
  return new SlaveID;
}

void SlaveID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlaveID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlaveID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlaveID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlaveID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlaveID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlaveID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlaveID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlaveID::MergeFrom(const SlaveID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlaveID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaveID::CopyFrom(const SlaveID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlaveID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SlaveID::Swap(SlaveID* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlaveID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlaveID_descriptor_;
  metadata.reflection = SlaveID_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TaskID::_default_value_;
#ifndef _MSC_VER
const int TaskID::kValueFieldNumber;
#endif  // !_MSC_VER

TaskID::TaskID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskID::InitAsDefaultInstance() {
}

TaskID::TaskID(const TaskID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskID::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskID::~TaskID() {
  SharedDtor();
}

void TaskID::SharedDtor() {
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void TaskID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskID_descriptor_;
}

const TaskID& TaskID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

TaskID* TaskID::default_instance_ = NULL;

TaskID* TaskID::New() const {
  return new TaskID;
}

void TaskID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskID::MergeFrom(const TaskID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskID::CopyFrom(const TaskID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TaskID::Swap(TaskID* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskID_descriptor_;
  metadata.reflection = TaskID_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ExecutorID::_default_value_;
#ifndef _MSC_VER
const int ExecutorID::kValueFieldNumber;
#endif  // !_MSC_VER

ExecutorID::ExecutorID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutorID::InitAsDefaultInstance() {
}

ExecutorID::ExecutorID(const ExecutorID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutorID::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutorID::~ExecutorID() {
  SharedDtor();
}

void ExecutorID::SharedDtor() {
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ExecutorID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutorID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutorID_descriptor_;
}

const ExecutorID& ExecutorID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

ExecutorID* ExecutorID::default_instance_ = NULL;

ExecutorID* ExecutorID::New() const {
  return new ExecutorID;
}

void ExecutorID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutorID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutorID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutorID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutorID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutorID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutorID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutorID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutorID::MergeFrom(const ExecutorID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutorID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutorID::CopyFrom(const ExecutorID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutorID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ExecutorID::Swap(ExecutorID* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutorID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutorID_descriptor_;
  metadata.reflection = ExecutorID_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Param::_default_key_;
const ::std::string Param::_default_value_;
#ifndef _MSC_VER
const int Param::kKeyFieldNumber;
const int Param::kValueFieldNumber;
#endif  // !_MSC_VER

Param::Param()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Param::InitAsDefaultInstance() {
}

Param::Param(const Param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Param::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Param::~Param() {
  SharedDtor();
}

void Param::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Param_descriptor_;
}

const Param& Param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

Param* Param::default_instance_ = NULL;

Param* Param::New() const {
  return new Param;
}

void Param::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // required string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // required string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Param::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Param::MergeFrom(const Param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Param::CopyFrom(const Param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Param::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Param::Swap(Param* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Param_descriptor_;
  metadata.reflection = Param_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Params::kParamFieldNumber;
#endif  // !_MSC_VER

Params::Params()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Params::InitAsDefaultInstance() {
}

Params::Params(const Params& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Params::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Params::~Params() {
  SharedDtor();
}

void Params::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Params::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Params::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Params_descriptor_;
}

const Params& Params::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

Params* Params::default_instance_ = NULL;

Params* Params::New() const {
  return new Params;
}

void Params::Clear() {
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.Param param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.Param param = 1;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->param(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Params::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.Param param = 1;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->param(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Params::ByteSize() const {
  int total_size = 0;
  
  // repeated .mesos.Param param = 1;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Params::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Params* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Params*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Params::MergeFrom(const Params& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Params::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params::CopyFrom(const Params& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  
  for (int i = 0; i < param_size(); i++) {
    if (!this->param(i).IsInitialized()) return false;
  }
  return true;
}

void Params::Swap(Params* other) {
  if (other != this) {
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Params::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Params_descriptor_;
  metadata.reflection = Params_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Resource_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_Type_descriptor_;
}
bool Resource_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Resource_Type Resource::SCALAR;
const Resource_Type Resource::RANGES;
const Resource_Type Resource::SET;
const Resource_Type Resource::Type_MIN;
const Resource_Type Resource::Type_MAX;
const int Resource::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Resource_Scalar::kValueFieldNumber;
#endif  // !_MSC_VER

Resource_Scalar::Resource_Scalar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Resource_Scalar::InitAsDefaultInstance() {
}

Resource_Scalar::Resource_Scalar(const Resource_Scalar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Resource_Scalar::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource_Scalar::~Resource_Scalar() {
  SharedDtor();
}

void Resource_Scalar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Resource_Scalar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource_Scalar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_Scalar_descriptor_;
}

const Resource_Scalar& Resource_Scalar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

Resource_Scalar* Resource_Scalar::default_instance_ = NULL;

Resource_Scalar* Resource_Scalar::New() const {
  return new Resource_Scalar;
}

void Resource_Scalar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource_Scalar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resource_Scalar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resource_Scalar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double value = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resource_Scalar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double value = 1;
    if (has_value()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource_Scalar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource_Scalar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource_Scalar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource_Scalar::MergeFrom(const Resource_Scalar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource_Scalar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource_Scalar::CopyFrom(const Resource_Scalar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource_Scalar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Resource_Scalar::Swap(Resource_Scalar* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource_Scalar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_Scalar_descriptor_;
  metadata.reflection = Resource_Scalar_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Resource_Range::kBeginFieldNumber;
const int Resource_Range::kEndFieldNumber;
#endif  // !_MSC_VER

Resource_Range::Resource_Range()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Resource_Range::InitAsDefaultInstance() {
}

Resource_Range::Resource_Range(const Resource_Range& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Resource_Range::SharedCtor() {
  _cached_size_ = 0;
  begin_ = GOOGLE_ULONGLONG(0);
  end_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource_Range::~Resource_Range() {
  SharedDtor();
}

void Resource_Range::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Resource_Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource_Range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_Range_descriptor_;
}

const Resource_Range& Resource_Range::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

Resource_Range* Resource_Range::default_instance_ = NULL;

Resource_Range* Resource_Range::New() const {
  return new Resource_Range;
}

void Resource_Range::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = GOOGLE_ULONGLONG(0);
    end_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource_Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }
      
      // required uint64 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resource_Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 begin = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->begin(), output);
  }
  
  // required uint64 end = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resource_Range::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 begin = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->begin(), target);
  }
  
  // required uint64 end = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resource_Range::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin());
    }
    
    // required uint64 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource_Range::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource_Range* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource_Range*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource_Range::MergeFrom(const Resource_Range& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_begin(from.begin());
    }
    if (from._has_bit(1)) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource_Range::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource_Range::CopyFrom(const Resource_Range& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource_Range::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Resource_Range::Swap(Resource_Range* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource_Range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_Range_descriptor_;
  metadata.reflection = Resource_Range_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Resource_Ranges::kRangeFieldNumber;
#endif  // !_MSC_VER

Resource_Ranges::Resource_Ranges()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Resource_Ranges::InitAsDefaultInstance() {
}

Resource_Ranges::Resource_Ranges(const Resource_Ranges& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Resource_Ranges::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource_Ranges::~Resource_Ranges() {
  SharedDtor();
}

void Resource_Ranges::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Resource_Ranges::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource_Ranges::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_Ranges_descriptor_;
}

const Resource_Ranges& Resource_Ranges::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

Resource_Ranges* Resource_Ranges::default_instance_ = NULL;

Resource_Ranges* Resource_Ranges::New() const {
  return new Resource_Ranges;
}

void Resource_Ranges::Clear() {
  range_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource_Ranges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.Resource.Range range = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_range;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resource_Ranges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.Resource.Range range = 1;
  for (int i = 0; i < this->range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->range(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resource_Ranges::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.Resource.Range range = 1;
  for (int i = 0; i < this->range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->range(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resource_Ranges::ByteSize() const {
  int total_size = 0;
  
  // repeated .mesos.Resource.Range range = 1;
  total_size += 1 * this->range_size();
  for (int i = 0; i < this->range_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->range(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource_Ranges::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource_Ranges* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource_Ranges*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource_Ranges::MergeFrom(const Resource_Ranges& from) {
  GOOGLE_CHECK_NE(&from, this);
  range_.MergeFrom(from.range_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource_Ranges::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource_Ranges::CopyFrom(const Resource_Ranges& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource_Ranges::IsInitialized() const {
  
  for (int i = 0; i < range_size(); i++) {
    if (!this->range(i).IsInitialized()) return false;
  }
  return true;
}

void Resource_Ranges::Swap(Resource_Ranges* other) {
  if (other != this) {
    range_.Swap(&other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource_Ranges::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_Ranges_descriptor_;
  metadata.reflection = Resource_Ranges_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Resource_Set::kItemFieldNumber;
#endif  // !_MSC_VER

Resource_Set::Resource_Set()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Resource_Set::InitAsDefaultInstance() {
}

Resource_Set::Resource_Set(const Resource_Set& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Resource_Set::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource_Set::~Resource_Set() {
  SharedDtor();
}

void Resource_Set::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Resource_Set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource_Set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_Set_descriptor_;
}

const Resource_Set& Resource_Set::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

Resource_Set* Resource_Set::default_instance_ = NULL;

Resource_Set* Resource_Set::New() const {
  return new Resource_Set;
}

void Resource_Set::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource_Set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_item()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item(0).data(), this->item(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resource_Set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string item = 1;
  for (int i = 0; i < this->item_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->item(i).data(), this->item(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resource_Set::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item(i).data(), this->item(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resource_Set::ByteSize() const {
  int total_size = 0;
  
  // repeated string item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource_Set::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource_Set* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource_Set*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource_Set::MergeFrom(const Resource_Set& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource_Set::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource_Set::CopyFrom(const Resource_Set& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource_Set::IsInitialized() const {
  
  return true;
}

void Resource_Set::Swap(Resource_Set* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource_Set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_Set_descriptor_;
  metadata.reflection = Resource_Set_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Resource::_default_name_;
#ifndef _MSC_VER
const int Resource::kNameFieldNumber;
const int Resource::kTypeFieldNumber;
const int Resource::kScalarFieldNumber;
const int Resource::kRangesFieldNumber;
const int Resource::kSetFieldNumber;
#endif  // !_MSC_VER

Resource::Resource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Resource::InitAsDefaultInstance() {
  scalar_ = const_cast< ::mesos::Resource_Scalar*>(&::mesos::Resource_Scalar::default_instance());
  ranges_ = const_cast< ::mesos::Resource_Ranges*>(&::mesos::Resource_Ranges::default_instance());
  set_ = const_cast< ::mesos::Resource_Set*>(&::mesos::Resource_Set::default_instance());
}

Resource::Resource(const Resource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Resource::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  type_ = 0;
  scalar_ = NULL;
  ranges_ = NULL;
  set_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource::~Resource() {
  SharedDtor();
}

void Resource::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete scalar_;
    delete ranges_;
    delete set_;
  }
}

void Resource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_descriptor_;
}

const Resource& Resource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

Resource* Resource::default_instance_ = NULL;

Resource* Resource::New() const {
  return new Resource;
}

void Resource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    type_ = 0;
    if (_has_bit(2)) {
      if (scalar_ != NULL) scalar_->::mesos::Resource_Scalar::Clear();
    }
    if (_has_bit(3)) {
      if (ranges_ != NULL) ranges_->::mesos::Resource_Ranges::Clear();
    }
    if (_has_bit(4)) {
      if (set_ != NULL) set_->::mesos::Resource_Set::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .mesos.Resource.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::Resource_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::Resource_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_scalar;
        break;
      }
      
      // optional .mesos.Resource.Scalar scalar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scalar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ranges;
        break;
      }
      
      // optional .mesos.Resource.Ranges ranges = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ranges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_set;
        break;
      }
      
      // optional .mesos.Resource.Set set = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required .mesos.Resource.Type type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional .mesos.Resource.Scalar scalar = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->scalar(), output);
  }
  
  // optional .mesos.Resource.Ranges ranges = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ranges(), output);
  }
  
  // optional .mesos.Resource.Set set = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->set(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required .mesos.Resource.Type type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional .mesos.Resource.Scalar scalar = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->scalar(), target);
  }
  
  // optional .mesos.Resource.Ranges ranges = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ranges(), target);
  }
  
  // optional .mesos.Resource.Set set = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->set(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resource::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .mesos.Resource.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .mesos.Resource.Scalar scalar = 3;
    if (has_scalar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scalar());
    }
    
    // optional .mesos.Resource.Ranges ranges = 4;
    if (has_ranges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranges());
    }
    
    // optional .mesos.Resource.Set set = 5;
    if (has_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      mutable_scalar()->::mesos::Resource_Scalar::MergeFrom(from.scalar());
    }
    if (from._has_bit(3)) {
      mutable_ranges()->::mesos::Resource_Ranges::MergeFrom(from.ranges());
    }
    if (from._has_bit(4)) {
      mutable_set()->::mesos::Resource_Set::MergeFrom(from.set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_scalar()) {
    if (!this->scalar().IsInitialized()) return false;
  }
  if (has_ranges()) {
    if (!this->ranges().IsInitialized()) return false;
  }
  return true;
}

void Resource::Swap(Resource* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(scalar_, other->scalar_);
    std::swap(ranges_, other->ranges_);
    std::swap(set_, other->set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_descriptor_;
  metadata.reflection = Resource_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ExecutorArgs::_default_hostname_;
const ::std::string ExecutorArgs::_default_data_;
#ifndef _MSC_VER
const int ExecutorArgs::kFrameworkIdFieldNumber;
const int ExecutorArgs::kExecutorIdFieldNumber;
const int ExecutorArgs::kSlaveIdFieldNumber;
const int ExecutorArgs::kHostnameFieldNumber;
const int ExecutorArgs::kDataFieldNumber;
#endif  // !_MSC_VER

ExecutorArgs::ExecutorArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutorArgs::InitAsDefaultInstance() {
  framework_id_ = const_cast< ::mesos::FrameworkID*>(&::mesos::FrameworkID::default_instance());
  executor_id_ = const_cast< ::mesos::ExecutorID*>(&::mesos::ExecutorID::default_instance());
  slave_id_ = const_cast< ::mesos::SlaveID*>(&::mesos::SlaveID::default_instance());
}

ExecutorArgs::ExecutorArgs(const ExecutorArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutorArgs::SharedCtor() {
  _cached_size_ = 0;
  framework_id_ = NULL;
  executor_id_ = NULL;
  slave_id_ = NULL;
  hostname_ = const_cast< ::std::string*>(&_default_hostname_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutorArgs::~ExecutorArgs() {
  SharedDtor();
}

void ExecutorArgs::SharedDtor() {
  if (hostname_ != &_default_hostname_) {
    delete hostname_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (this != default_instance_) {
    delete framework_id_;
    delete executor_id_;
    delete slave_id_;
  }
}

void ExecutorArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutorArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutorArgs_descriptor_;
}

const ExecutorArgs& ExecutorArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

ExecutorArgs* ExecutorArgs::default_instance_ = NULL;

ExecutorArgs* ExecutorArgs::New() const {
  return new ExecutorArgs;
}

void ExecutorArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (framework_id_ != NULL) framework_id_->::mesos::FrameworkID::Clear();
    }
    if (_has_bit(1)) {
      if (executor_id_ != NULL) executor_id_->::mesos::ExecutorID::Clear();
    }
    if (_has_bit(2)) {
      if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
    }
    if (_has_bit(3)) {
      if (hostname_ != &_default_hostname_) {
        hostname_->clear();
      }
    }
    if (_has_bit(4)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutorArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.FrameworkID framework_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_executor_id;
        break;
      }
      
      // required .mesos.ExecutorID executor_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_executor_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slave_id;
        break;
      }
      
      // required .mesos.SlaveID slave_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slave_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slave_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hostname;
        break;
      }
      
      // required string hostname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }
      
      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutorArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.FrameworkID framework_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_id(), output);
  }
  
  // required .mesos.ExecutorID executor_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->executor_id(), output);
  }
  
  // required .mesos.SlaveID slave_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slave_id(), output);
  }
  
  // required string hostname = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hostname(), output);
  }
  
  // optional bytes data = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutorArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.FrameworkID framework_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_id(), target);
  }
  
  // required .mesos.ExecutorID executor_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->executor_id(), target);
  }
  
  // required .mesos.SlaveID slave_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slave_id(), target);
  }
  
  // required string hostname = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostname(), target);
  }
  
  // optional bytes data = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutorArgs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.FrameworkID framework_id = 1;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_id());
    }
    
    // required .mesos.ExecutorID executor_id = 2;
    if (has_executor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->executor_id());
    }
    
    // required .mesos.SlaveID slave_id = 3;
    if (has_slave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slave_id());
    }
    
    // required string hostname = 4;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }
    
    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutorArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutorArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutorArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutorArgs::MergeFrom(const ExecutorArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_framework_id()->::mesos::FrameworkID::MergeFrom(from.framework_id());
    }
    if (from._has_bit(1)) {
      mutable_executor_id()->::mesos::ExecutorID::MergeFrom(from.executor_id());
    }
    if (from._has_bit(2)) {
      mutable_slave_id()->::mesos::SlaveID::MergeFrom(from.slave_id());
    }
    if (from._has_bit(3)) {
      set_hostname(from.hostname());
    }
    if (from._has_bit(4)) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutorArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutorArgs::CopyFrom(const ExecutorArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutorArgs::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_framework_id()) {
    if (!this->framework_id().IsInitialized()) return false;
  }
  if (has_executor_id()) {
    if (!this->executor_id().IsInitialized()) return false;
  }
  if (has_slave_id()) {
    if (!this->slave_id().IsInitialized()) return false;
  }
  return true;
}

void ExecutorArgs::Swap(ExecutorArgs* other) {
  if (other != this) {
    std::swap(framework_id_, other->framework_id_);
    std::swap(executor_id_, other->executor_id_);
    std::swap(slave_id_, other->slave_id_);
    std::swap(hostname_, other->hostname_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutorArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutorArgs_descriptor_;
  metadata.reflection = ExecutorArgs_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TaskDescription::_default_name_;
const ::std::string TaskDescription::_default_data_;
#ifndef _MSC_VER
const int TaskDescription::kNameFieldNumber;
const int TaskDescription::kTaskIdFieldNumber;
const int TaskDescription::kSlaveIdFieldNumber;
const int TaskDescription::kResourcesFieldNumber;
const int TaskDescription::kExecutorFieldNumber;
const int TaskDescription::kDataFieldNumber;
#endif  // !_MSC_VER

TaskDescription::TaskDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskDescription::InitAsDefaultInstance() {
  task_id_ = const_cast< ::mesos::TaskID*>(&::mesos::TaskID::default_instance());
  slave_id_ = const_cast< ::mesos::SlaveID*>(&::mesos::SlaveID::default_instance());
  executor_ = const_cast< ::mesos::ExecutorInfo*>(&::mesos::ExecutorInfo::default_instance());
}

TaskDescription::TaskDescription(const TaskDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskDescription::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  task_id_ = NULL;
  slave_id_ = NULL;
  executor_ = NULL;
  data_ = const_cast< ::std::string*>(&_default_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskDescription::~TaskDescription() {
  SharedDtor();
}

void TaskDescription::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (this != default_instance_) {
    delete task_id_;
    delete slave_id_;
    delete executor_;
  }
}

void TaskDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskDescription_descriptor_;
}

const TaskDescription& TaskDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

TaskDescription* TaskDescription::default_instance_ = NULL;

TaskDescription* TaskDescription::New() const {
  return new TaskDescription;
}

void TaskDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (task_id_ != NULL) task_id_->::mesos::TaskID::Clear();
    }
    if (_has_bit(2)) {
      if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
    }
    if (_has_bit(4)) {
      if (executor_ != NULL) executor_->::mesos::ExecutorInfo::Clear();
    }
    if (_has_bit(5)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
  }
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }
      
      // required .mesos.TaskID task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slave_id;
        break;
      }
      
      // required .mesos.SlaveID slave_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slave_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slave_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resources;
        break;
      }
      
      // repeated .mesos.Resource resources = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resources;
        if (input->ExpectTag(42)) goto parse_executor;
        break;
      }
      
      // optional .mesos.ExecutorInfo executor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_executor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }
      
      // optional bytes data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required .mesos.TaskID task_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task_id(), output);
  }
  
  // required .mesos.SlaveID slave_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slave_id(), output);
  }
  
  // repeated .mesos.Resource resources = 4;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->resources(i), output);
  }
  
  // optional .mesos.ExecutorInfo executor = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->executor(), output);
  }
  
  // optional bytes data = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required .mesos.TaskID task_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task_id(), target);
  }
  
  // required .mesos.SlaveID slave_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slave_id(), target);
  }
  
  // repeated .mesos.Resource resources = 4;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->resources(i), target);
  }
  
  // optional .mesos.ExecutorInfo executor = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->executor(), target);
  }
  
  // optional bytes data = 6;
  if (_has_bit(5)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskDescription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .mesos.TaskID task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_id());
    }
    
    // required .mesos.SlaveID slave_id = 3;
    if (has_slave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slave_id());
    }
    
    // optional .mesos.ExecutorInfo executor = 5;
    if (has_executor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->executor());
    }
    
    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  // repeated .mesos.Resource resources = 4;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskDescription::MergeFrom(const TaskDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      mutable_task_id()->::mesos::TaskID::MergeFrom(from.task_id());
    }
    if (from._has_bit(2)) {
      mutable_slave_id()->::mesos::SlaveID::MergeFrom(from.slave_id());
    }
    if (from._has_bit(4)) {
      mutable_executor()->::mesos::ExecutorInfo::MergeFrom(from.executor());
    }
    if (from._has_bit(5)) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskDescription::CopyFrom(const TaskDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_task_id()) {
    if (!this->task_id().IsInitialized()) return false;
  }
  if (has_slave_id()) {
    if (!this->slave_id().IsInitialized()) return false;
  }
  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  if (has_executor()) {
    if (!this->executor().IsInitialized()) return false;
  }
  return true;
}

void TaskDescription::Swap(TaskDescription* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(task_id_, other->task_id_);
    std::swap(slave_id_, other->slave_id_);
    resources_.Swap(&other->resources_);
    std::swap(executor_, other->executor_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskDescription_descriptor_;
  metadata.reflection = TaskDescription_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TaskStatus::_default_message_;
const ::std::string TaskStatus::_default_data_;
#ifndef _MSC_VER
const int TaskStatus::kTaskIdFieldNumber;
const int TaskStatus::kStateFieldNumber;
const int TaskStatus::kMessageFieldNumber;
const int TaskStatus::kDataFieldNumber;
#endif  // !_MSC_VER

TaskStatus::TaskStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskStatus::InitAsDefaultInstance() {
  task_id_ = const_cast< ::mesos::TaskID*>(&::mesos::TaskID::default_instance());
}

TaskStatus::TaskStatus(const TaskStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskStatus::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = NULL;
  state_ = 0;
  message_ = const_cast< ::std::string*>(&_default_message_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskStatus::~TaskStatus() {
  SharedDtor();
}

void TaskStatus::SharedDtor() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (this != default_instance_) {
    delete task_id_;
  }
}

void TaskStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStatus_descriptor_;
}

const TaskStatus& TaskStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

TaskStatus* TaskStatus::default_instance_ = NULL;

TaskStatus* TaskStatus::New() const {
  return new TaskStatus;
}

void TaskStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_id_ != NULL) task_id_->::mesos::TaskID::Clear();
    }
    state_ = 0;
    if (_has_bit(2)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
    if (_has_bit(3)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.TaskID task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .mesos.TaskState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (mesos::TaskState_IsValid(value)) {
            set_state(static_cast< mesos::TaskState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }
      
      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }
      
      // optional string message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.TaskID task_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_id(), output);
  }
  
  // required .mesos.TaskState state = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // optional bytes data = 3;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }
  
  // optional string message = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.TaskID task_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_id(), target);
  }
  
  // required .mesos.TaskState state = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // optional bytes data = 3;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }
  
  // optional string message = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.TaskID task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_id());
    }
    
    // required .mesos.TaskState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskStatus::MergeFrom(const TaskStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_task_id()->::mesos::TaskID::MergeFrom(from.task_id());
    }
    if (from._has_bit(1)) {
      set_state(from.state());
    }
    if (from._has_bit(2)) {
      set_message(from.message());
    }
    if (from._has_bit(3)) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStatus::CopyFrom(const TaskStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_task_id()) {
    if (!this->task_id().IsInitialized()) return false;
  }
  return true;
}

void TaskStatus::Swap(TaskStatus* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(state_, other->state_);
    std::swap(message_, other->message_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskStatus_descriptor_;
  metadata.reflection = TaskStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ExecutorInfo::_default_uri_;
const ::std::string ExecutorInfo::_default_data_;
#ifndef _MSC_VER
const int ExecutorInfo::kExecutorIdFieldNumber;
const int ExecutorInfo::kUriFieldNumber;
const int ExecutorInfo::kResourcesFieldNumber;
const int ExecutorInfo::kParamsFieldNumber;
const int ExecutorInfo::kDataFieldNumber;
#endif  // !_MSC_VER

ExecutorInfo::ExecutorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutorInfo::InitAsDefaultInstance() {
  executor_id_ = const_cast< ::mesos::ExecutorID*>(&::mesos::ExecutorID::default_instance());
  params_ = const_cast< ::mesos::Params*>(&::mesos::Params::default_instance());
}

ExecutorInfo::ExecutorInfo(const ExecutorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutorInfo::SharedCtor() {
  _cached_size_ = 0;
  executor_id_ = NULL;
  uri_ = const_cast< ::std::string*>(&_default_uri_);
  params_ = NULL;
  data_ = const_cast< ::std::string*>(&_default_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutorInfo::~ExecutorInfo() {
  SharedDtor();
}

void ExecutorInfo::SharedDtor() {
  if (uri_ != &_default_uri_) {
    delete uri_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (this != default_instance_) {
    delete executor_id_;
    delete params_;
  }
}

void ExecutorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutorInfo_descriptor_;
}

const ExecutorInfo& ExecutorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

ExecutorInfo* ExecutorInfo::default_instance_ = NULL;

ExecutorInfo* ExecutorInfo::New() const {
  return new ExecutorInfo;
}

void ExecutorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (executor_id_ != NULL) executor_id_->::mesos::ExecutorID::Clear();
    }
    if (_has_bit(1)) {
      if (uri_ != &_default_uri_) {
        uri_->clear();
      }
    }
    if (_has_bit(3)) {
      if (params_ != NULL) params_->::mesos::Params::Clear();
    }
    if (_has_bit(4)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
  }
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.ExecutorID executor_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_executor_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uri;
        break;
      }
      
      // required string uri = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }
      
      // optional .mesos.Params params = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }
      
      // optional bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resources;
        break;
      }
      
      // repeated .mesos.Resource resources = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resources;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.ExecutorID executor_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->executor_id(), output);
  }
  
  // required string uri = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uri(), output);
  }
  
  // optional .mesos.Params params = 3;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->params(), output);
  }
  
  // optional bytes data = 4;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }
  
  // repeated .mesos.Resource resources = 5;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->resources(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.ExecutorID executor_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->executor_id(), target);
  }
  
  // required string uri = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }
  
  // optional .mesos.Params params = 3;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->params(), target);
  }
  
  // optional bytes data = 4;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }
  
  // repeated .mesos.Resource resources = 5;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->resources(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutorInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.ExecutorID executor_id = 1;
    if (has_executor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->executor_id());
    }
    
    // required string uri = 2;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }
    
    // optional .mesos.Params params = 3;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }
    
    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  // repeated .mesos.Resource resources = 5;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutorInfo::MergeFrom(const ExecutorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_executor_id()->::mesos::ExecutorID::MergeFrom(from.executor_id());
    }
    if (from._has_bit(1)) {
      set_uri(from.uri());
    }
    if (from._has_bit(3)) {
      mutable_params()->::mesos::Params::MergeFrom(from.params());
    }
    if (from._has_bit(4)) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutorInfo::CopyFrom(const ExecutorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_executor_id()) {
    if (!this->executor_id().IsInitialized()) return false;
  }
  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  return true;
}

void ExecutorInfo::Swap(ExecutorInfo* other) {
  if (other != this) {
    std::swap(executor_id_, other->executor_id_);
    std::swap(uri_, other->uri_);
    resources_.Swap(&other->resources_);
    std::swap(params_, other->params_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutorInfo_descriptor_;
  metadata.reflection = ExecutorInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string FrameworkInfo::_default_user_;
const ::std::string FrameworkInfo::_default_name_;
#ifndef _MSC_VER
const int FrameworkInfo::kUserFieldNumber;
const int FrameworkInfo::kNameFieldNumber;
const int FrameworkInfo::kExecutorFieldNumber;
#endif  // !_MSC_VER

FrameworkInfo::FrameworkInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameworkInfo::InitAsDefaultInstance() {
  executor_ = const_cast< ::mesos::ExecutorInfo*>(&::mesos::ExecutorInfo::default_instance());
}

FrameworkInfo::FrameworkInfo(const FrameworkInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameworkInfo::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&_default_user_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  executor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameworkInfo::~FrameworkInfo() {
  SharedDtor();
}

void FrameworkInfo::SharedDtor() {
  if (user_ != &_default_user_) {
    delete user_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete executor_;
  }
}

void FrameworkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameworkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameworkInfo_descriptor_;
}

const FrameworkInfo& FrameworkInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

FrameworkInfo* FrameworkInfo::default_instance_ = NULL;

FrameworkInfo* FrameworkInfo::New() const {
  return new FrameworkInfo;
}

void FrameworkInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (user_ != &_default_user_) {
        user_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (executor_ != NULL) executor_->::mesos::ExecutorInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameworkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_executor;
        break;
      }
      
      // required .mesos.ExecutorInfo executor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_executor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameworkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required .mesos.ExecutorInfo executor = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->executor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameworkInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required .mesos.ExecutorInfo executor = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->executor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameworkInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .mesos.ExecutorInfo executor = 3;
    if (has_executor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->executor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameworkInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameworkInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameworkInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameworkInfo::MergeFrom(const FrameworkInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_user(from.user());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      mutable_executor()->::mesos::ExecutorInfo::MergeFrom(from.executor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameworkInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkInfo::CopyFrom(const FrameworkInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_executor()) {
    if (!this->executor().IsInitialized()) return false;
  }
  return true;
}

void FrameworkInfo::Swap(FrameworkInfo* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(name_, other->name_);
    std::swap(executor_, other->executor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameworkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameworkInfo_descriptor_;
  metadata.reflection = FrameworkInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SlaveInfo::_default_hostname_;
const ::std::string SlaveInfo::_default_public_hostname_;
#ifndef _MSC_VER
const int SlaveInfo::kHostnameFieldNumber;
const int SlaveInfo::kPublicHostnameFieldNumber;
const int SlaveInfo::kResourcesFieldNumber;
#endif  // !_MSC_VER

SlaveInfo::SlaveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlaveInfo::InitAsDefaultInstance() {
}

SlaveInfo::SlaveInfo(const SlaveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlaveInfo::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&_default_hostname_);
  public_hostname_ = const_cast< ::std::string*>(&_default_public_hostname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlaveInfo::~SlaveInfo() {
  SharedDtor();
}

void SlaveInfo::SharedDtor() {
  if (hostname_ != &_default_hostname_) {
    delete hostname_;
  }
  if (public_hostname_ != &_default_public_hostname_) {
    delete public_hostname_;
  }
  if (this != default_instance_) {
  }
}

void SlaveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlaveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlaveInfo_descriptor_;
}

const SlaveInfo& SlaveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

SlaveInfo* SlaveInfo::default_instance_ = NULL;

SlaveInfo* SlaveInfo::New() const {
  return new SlaveInfo;
}

void SlaveInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (hostname_ != &_default_hostname_) {
        hostname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (public_hostname_ != &_default_public_hostname_) {
        public_hostname_->clear();
      }
    }
  }
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlaveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_public_hostname;
        break;
      }
      
      // required string public_hostname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->public_hostname().data(), this->public_hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resources;
        break;
      }
      
      // repeated .mesos.Resource resources = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resources;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlaveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string hostname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }
  
  // required string public_hostname = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_hostname().data(), this->public_hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->public_hostname(), output);
  }
  
  // repeated .mesos.Resource resources = 3;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resources(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlaveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string hostname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }
  
  // required string public_hostname = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_hostname().data(), this->public_hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->public_hostname(), target);
  }
  
  // repeated .mesos.Resource resources = 3;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resources(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlaveInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }
    
    // required string public_hostname = 2;
    if (has_public_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_hostname());
    }
    
  }
  // repeated .mesos.Resource resources = 3;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlaveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlaveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlaveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlaveInfo::MergeFrom(const SlaveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_hostname(from.hostname());
    }
    if (from._has_bit(1)) {
      set_public_hostname(from.public_hostname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlaveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaveInfo::CopyFrom(const SlaveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlaveInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  return true;
}

void SlaveInfo::Swap(SlaveInfo* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(public_hostname_, other->public_hostname_);
    resources_.Swap(&other->resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlaveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlaveInfo_descriptor_;
  metadata.reflection = SlaveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceRequest::kSlaveIdFieldNumber;
const int ResourceRequest::kResourcesFieldNumber;
#endif  // !_MSC_VER

ResourceRequest::ResourceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceRequest::InitAsDefaultInstance() {
  slave_id_ = const_cast< ::mesos::SlaveID*>(&::mesos::SlaveID::default_instance());
}

ResourceRequest::ResourceRequest(const ResourceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceRequest::SharedCtor() {
  _cached_size_ = 0;
  slave_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceRequest::~ResourceRequest() {
  SharedDtor();
}

void ResourceRequest::SharedDtor() {
  if (this != default_instance_) {
    delete slave_id_;
  }
}

void ResourceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceRequest_descriptor_;
}

const ResourceRequest& ResourceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

ResourceRequest* ResourceRequest::default_instance_ = NULL;

ResourceRequest* ResourceRequest::New() const {
  return new ResourceRequest;
}

void ResourceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
    }
  }
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.SlaveID slave_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slave_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        break;
      }
      
      // repeated .mesos.Resource resources = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mesos.SlaveID slave_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slave_id(), output);
  }
  
  // repeated .mesos.Resource resources = 2;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resources(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mesos.SlaveID slave_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slave_id(), target);
  }
  
  // repeated .mesos.Resource resources = 2;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resources(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.SlaveID slave_id = 1;
    if (has_slave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slave_id());
    }
    
  }
  // repeated .mesos.Resource resources = 2;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceRequest::MergeFrom(const ResourceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_slave_id()->::mesos::SlaveID::MergeFrom(from.slave_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceRequest::CopyFrom(const ResourceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceRequest::IsInitialized() const {
  
  if (has_slave_id()) {
    if (!this->slave_id().IsInitialized()) return false;
  }
  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  return true;
}

void ResourceRequest::Swap(ResourceRequest* other) {
  if (other != this) {
    std::swap(slave_id_, other->slave_id_);
    resources_.Swap(&other->resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceRequest_descriptor_;
  metadata.reflection = ResourceRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Offer::_default_hostname_;
#ifndef _MSC_VER
const int Offer::kIdFieldNumber;
const int Offer::kFrameworkIdFieldNumber;
const int Offer::kSlaveIdFieldNumber;
const int Offer::kHostnameFieldNumber;
const int Offer::kResourcesFieldNumber;
const int Offer::kExecutorIdsFieldNumber;
#endif  // !_MSC_VER

Offer::Offer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Offer::InitAsDefaultInstance() {
  id_ = const_cast< ::mesos::OfferID*>(&::mesos::OfferID::default_instance());
  framework_id_ = const_cast< ::mesos::FrameworkID*>(&::mesos::FrameworkID::default_instance());
  slave_id_ = const_cast< ::mesos::SlaveID*>(&::mesos::SlaveID::default_instance());
}

Offer::Offer(const Offer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Offer::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  framework_id_ = NULL;
  slave_id_ = NULL;
  hostname_ = const_cast< ::std::string*>(&_default_hostname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Offer::~Offer() {
  SharedDtor();
}

void Offer::SharedDtor() {
  if (hostname_ != &_default_hostname_) {
    delete hostname_;
  }
  if (this != default_instance_) {
    delete id_;
    delete framework_id_;
    delete slave_id_;
  }
}

void Offer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Offer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Offer_descriptor_;
}

const Offer& Offer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

Offer* Offer::default_instance_ = NULL;

Offer* Offer::New() const {
  return new Offer;
}

void Offer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != NULL) id_->::mesos::OfferID::Clear();
    }
    if (_has_bit(1)) {
      if (framework_id_ != NULL) framework_id_->::mesos::FrameworkID::Clear();
    }
    if (_has_bit(2)) {
      if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
    }
    if (_has_bit(3)) {
      if (hostname_ != &_default_hostname_) {
        hostname_->clear();
      }
    }
  }
  resources_.Clear();
  executor_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Offer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.OfferID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_framework_id;
        break;
      }
      
      // required .mesos.FrameworkID framework_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_framework_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slave_id;
        break;
      }
      
      // required .mesos.SlaveID slave_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slave_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slave_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hostname;
        break;
      }
      
      // required string hostname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resources;
        break;
      }
      
      // repeated .mesos.Resource resources = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resources;
        if (input->ExpectTag(50)) goto parse_executor_ids;
        break;
      }
      
      // repeated .mesos.ExecutorID executor_ids = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executor_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_executor_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_executor_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Offer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.OfferID id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // required .mesos.FrameworkID framework_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->framework_id(), output);
  }
  
  // required .mesos.SlaveID slave_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slave_id(), output);
  }
  
  // required string hostname = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hostname(), output);
  }
  
  // repeated .mesos.Resource resources = 5;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->resources(i), output);
  }
  
  // repeated .mesos.ExecutorID executor_ids = 6;
  for (int i = 0; i < this->executor_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->executor_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Offer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.OfferID id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // required .mesos.FrameworkID framework_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->framework_id(), target);
  }
  
  // required .mesos.SlaveID slave_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slave_id(), target);
  }
  
  // required string hostname = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostname(), target);
  }
  
  // repeated .mesos.Resource resources = 5;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->resources(i), target);
  }
  
  // repeated .mesos.ExecutorID executor_ids = 6;
  for (int i = 0; i < this->executor_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->executor_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Offer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.OfferID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // required .mesos.FrameworkID framework_id = 2;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_id());
    }
    
    // required .mesos.SlaveID slave_id = 3;
    if (has_slave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slave_id());
    }
    
    // required string hostname = 4;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }
    
  }
  // repeated .mesos.Resource resources = 5;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }
  
  // repeated .mesos.ExecutorID executor_ids = 6;
  total_size += 1 * this->executor_ids_size();
  for (int i = 0; i < this->executor_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->executor_ids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Offer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Offer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Offer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Offer::MergeFrom(const Offer& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  executor_ids_.MergeFrom(from.executor_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_id()->::mesos::OfferID::MergeFrom(from.id());
    }
    if (from._has_bit(1)) {
      mutable_framework_id()->::mesos::FrameworkID::MergeFrom(from.framework_id());
    }
    if (from._has_bit(2)) {
      mutable_slave_id()->::mesos::SlaveID::MergeFrom(from.slave_id());
    }
    if (from._has_bit(3)) {
      set_hostname(from.hostname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Offer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offer::CopyFrom(const Offer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_framework_id()) {
    if (!this->framework_id().IsInitialized()) return false;
  }
  if (has_slave_id()) {
    if (!this->slave_id().IsInitialized()) return false;
  }
  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  for (int i = 0; i < executor_ids_size(); i++) {
    if (!this->executor_ids(i).IsInitialized()) return false;
  }
  return true;
}

void Offer::Swap(Offer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(framework_id_, other->framework_id_);
    std::swap(slave_id_, other->slave_id_);
    std::swap(hostname_, other->hostname_);
    resources_.Swap(&other->resources_);
    executor_ids_.Swap(&other->executor_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Offer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Offer_descriptor_;
  metadata.reflection = Offer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Filters::kRefuseSecondsFieldNumber;
#endif  // !_MSC_VER

Filters::Filters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Filters::InitAsDefaultInstance() {
}

Filters::Filters(const Filters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Filters::SharedCtor() {
  _cached_size_ = 0;
  refuse_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Filters::~Filters() {
  SharedDtor();
}

void Filters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Filters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Filters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Filters_descriptor_;
}

const Filters& Filters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2eproto();  return *default_instance_;
}

Filters* Filters::default_instance_ = NULL;

Filters* Filters::New() const {
  return new Filters;
}

void Filters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refuse_seconds_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Filters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double refuse_seconds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &refuse_seconds_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Filters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double refuse_seconds = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->refuse_seconds(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Filters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double refuse_seconds = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->refuse_seconds(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Filters::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double refuse_seconds = 1;
    if (has_refuse_seconds()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Filters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Filters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Filters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Filters::MergeFrom(const Filters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_refuse_seconds(from.refuse_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Filters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filters::CopyFrom(const Filters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filters::IsInitialized() const {
  
  return true;
}

void Filters::Swap(Filters* other) {
  if (other != this) {
    std::swap(refuse_seconds_, other->refuse_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Filters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Filters_descriptor_;
  metadata.reflection = Filters_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mesos

// @@protoc_insertion_point(global_scope)
